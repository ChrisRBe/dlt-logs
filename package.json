{
	"name": "dlt-logs",
	"displayName": "DLT-Logs",
	"description": "Open DLT diagnostic log and trace files with lifecycle detection, filters, time-sync, etc.",
	"version": "0.10.0",
	"license": "CC BY-NC-SA 4.0",
	"publisher": "mbehr1",
	"author": {
		"name": "Matthias Behr",
		"email": "mbehr+dltlogs@mcbehr.de"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/mbehr1/dlt-logs.git"
	},
	"bugs": {
		"url": "https://github.com/mbehr1/dlt-logs/issues"
	},
	"engines": {
		"vscode": "^1.43.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onFileSystem:dlt-log",
		"onCommand:extension.dltOpenFile"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": [
			{
				"title": "DLT-Logs",
				"properties": {
					"dlt-logs.fileExtensions": {
						"type": [
							"string"
						],
						"default": [
							"dlt",
							"DLT"
						],
						"description": "Specifies the file extensions that can be opened."
					},
					"dlt-logs.reReadTimeout": {
						"type": "integer",
						"default": 1000,
						"description": "Timeout in ms until the first re-read happens. Defaults to 1s."
					},
					"dlt-logs.maxNumberLogs": {
						"type": "integer",
						"default": 1000000,
						"description": "Maximum number of DLT logs that are shown in one page. If more messages do exist a paging mechanism will reload at 4/5th the next chunk. You can only search within that page. Please consider using filter to stay within that limit. Defaults to 1'000'000."
					},
					"dlt-logs.columns": {
						"type": "array",
						"items": {
							"type": "object",
							"title": "column config",
							"properties": {
								"name": {
									"type": "string",
									"description": "name of the column",
									"enum": [
										"index",
										"recorded time",
										"timestamp",
										"ecu",
										"apid",
										"ctid",
										"text",
										"mcnt",
										"type",
										"subtype",
										"mode"
									]
								},
								"visible": {
									"type": "boolean",
									"description": "visibility of the column",
									"default": true
								},
								"icon": {
									"type": "string",
									"description": "optional icon (codicon). e.g. $(watch)"
								},
								"description": {
									"type": "string",
									"description": "optional description shown in the column config menu"
								}
							}
						},
						"default": [
							{
								"name": "index",
								"icon": "$(list-ordered)",
								"description": "index of this msg inside the file"
							},
							{
								"name": "recorded time",
								"icon": "$(radio-tower)",
								"description": "recorded time as local time string",
								"visible": false
							},
							{
								"name": "timestamp",
								"icon": "$(watch)",
								"description": "relative timestamp in 0.1ms when the message was sent",
								"visible": false
							},
							{
								"name": "mcnt",
								"description": "message counter. Should count up for each (ECU/APID/CTID)",
								"visible": false
							},
							{
								"name": "ecu",
								"icon": "$(circuit-board)",
								"description": "ECU identifier"
							},
							{
								"name": "apid",
								"icon": "$(package)",
								"description": "application identifier"
							},
							{
								"name": "ctid",
								"icon": "$(list-tree)",
								"description": "context identifier"
							},
							{
								"name": "type",
								"description": "type (LOG|CONTROL|NETWORK|TRACE) of the message",
								"visible": false
							},
							{
								"name": "subtype",
								"description": "sub-type (e.g. log level for type LOG) of the message",
								"visible": false
							},
							{
								"name": "mode",
								"description": "mode (verbose|non-verbose) of the message",
								"visible": false
							},
							{
								"name": "text",
								"icon": "$(symbol-string)",
								"description": "payload (assembled args) as text"
							}
						]
					},
					"dlt-logs.filters": {
						"type": "array",
						"items": {
							"type": "object",
							"title": "filter",
							"properties": {
								"type": {
									"type": "integer",
									"description": "Type of this filter. 0 = positive, 1 = negative, 2 = marker, 3=event (time-sync)"
								},
								"enabled": {
									"type": "boolean",
									"description": "Determines whether the filter is currently enabled.",
									"default": true
								},
								"atLoadTime": {
									"type": "boolean",
									"description": "Determines whether the filter is already applied at file open time reducing the amount of msgs to be processed. Default=false",
									"default": false
								},
								"mstp": {
									"type": "integer",
									"description": "The MSTP to filter for. 0 = LOG, 1 = TRACE, 2 = NW_TRACE, 3 = CONTROL. Defaults to no filter."
								},
								"logLevelMin": {
									"type": "integer",
									"description": "Minimum log level to filter for. 1 = FATAL, 2 = ERROR, 3 = WARN, 4 = INFO, 5 = DEBUG, 6 = VERBOSE. Default: no filtering to log level. Matches if the msg is type LOG and the loglevel is >= this value. E.g. use logLevelMin=4 with a neg. filter to filter out all INFO, DEBUG, VERBOSE msgs. Implies filtering for MSTP=0(LOG)."
								},
								"logLevelMax": {
									"type": "integer",
									"description": "Maximum log level to filter for. 1 = FATAL, 2 = ERROR, 3 = WARN, 4 = INFO, 5 = DEBUG, 6 = VERBOSE.  Default: no filtering to log level. Matches if the msg is type LOG and the loglevel is <= this value. E.g. use logLevelMax=2 with a pos. filter to see all FATAL and ERROR msgs. Implies filtering for MSTP=0(LOG)."
								},
								"ecu": {
									"type": "string",
									"description": "The ECU id to filter for. Ignored if empty.",
									"default": ""
								},
								"apid": {
									"type": "string",
									"description": "The APID to filter for. Should have 4 chars (less will be filled with \\0). Ignored if empty.",
									"default": ""
								},
								"ctid": {
									"type": "string",
									"description": "The CTID to filter for. Should have 4 chars (less will be filled with \\0). Ignored if empty.",
									"default": ""
								},
								"payload": {
									"type": "string",
									"description": "A string to search for in (contains) the payload text. The search is case sensitive. Ignored if empty."
								},
								"payloadRegex": {
									"type": "string",
									"description": "A regular expression (JS/TS/node syntax) to match against the payload text. The search is case sensitive. Ignored if empty. If provided 'payload' is ignored."
								},
								"filterColour": {
									"type": "string",
									"description:": "The background colour used for type marker(2). Any css colour code like #f0f0f0 or 'red' can be used. For more detailed customization you can define decorations and refer to those. Only used with marker. Defaults to blue.",
									"default": "blue"
								},
								"decorationId": {
									"type": "string",
									"description": "Identifier of the decoration (id of decorations config option) to use for marker instead of filterColour. Defaults to none."
								},
								"timeSyncId": {
									"type": "string",
									"description": "Optional identifier of a 'time sync event'. This gets broadcasted to other documents with the time and the last regex capture in lower case (from payloadRegex) as value."
								},
								"timeSyncPrio": {
									"type": "integer",
									"description": "Optional (needed if timeSyncId is used) priority of the time-sync event. As two documents exchange their events by this prio they decide on who will adjust the time. The event with the highest prio (lowest number) will be used."
								}
							}
						},
						"default": []
					},
					"dlt-logs.plugins": {
						"type": "array",
						"items": [
							{
								"type": "object",
								"title": "FileTransfer plugin",
								"properties": {
									"name": {
										"type": "string",
										"description": "Identifier of the plugin. Currently only 'FileTransfer' is available.",
										"enum": [
											"FileTransfer"
										]
									},
									"enabled": {
										"type": "boolean",
										"description": "Determines whether the plugin is currently enabled.",
										"default": true
									},
									"allowSave": {
										"type": "boolean",
										"description": "Determing whether saving the files is supported. Otherwise just the information of filetransfers is provided. This reduces the memory footprint. Default: true (allow).",
										"default": true
									},
									"keepFLDA": {
										"type": "boolean",
										"description": "Whether to keep the FLDA log messages. Default is to remove them from the logs.",
										"default": false
									},
									"apid": {
										"type": "string",
										"description": "The APID to filter for FL* msgs. Should have 4 chars (less will be filled with \\0). Ignored if empty. The spec doesn't define any but providing one speeds up parsing.",
										"default": ""
									},
									"ctid": {
										"type": "string",
										"description": "The CTID to filter for FL* msgs. Should have 4 chars (less will be filled with \\0). Ignored if empty. The spec doesn't define any value but providing one speeds up parsing.",
										"default": ""
									}
								}
							}
						],
						"default": [
							{
								"name": "FileTransfer",
								"enabled": true,
								"allowSave": true,
								"keepFLDA": false
							}
						]
					},
					"dlt-logs.decorations": {
						"type": "array",
						"items": {
							"type": "object",
							"title": "decoration",
							"properties": {
								"id": {
									"type": "string",
									"description": "Identifier of this decoration for later reference e.g. in filters."
								},
								"renderOptions": {
									"type": "object",
									"description": "Render options see vs code API DecorationRenderOptions. isWholeLine:true will be added automatically."
								}
							}
						},
						"default": [
							{
								"id": "error",
								"renderOptions": {
									"borderWidth": "1px",
									"borderStyle": "solid",
									"overviewRulerColor": "red",
									"overviewRulerLane": 1,
									"light": {
										"borderColor": "red"
									},
									"dark": {
										"borderColor": "red"
									}
								}
							},
							{
								"id": "warning",
								"renderOptions": {
									"borderWidth": "1px",
									"borderStyle": "dotted",
									"overviewRulerColor": "orange",
									"overviewRulerLane": 2,
									"light": {
										"borderColor": "orange"
									},
									"dark": {
										"borderColor": "orange"
									}
								}
							},
							{
								"id": "fatal",
								"renderOptions": {
									"borderWidth": "3px",
									"borderStyle": "solid",
									"overviewRulerColor": "red",
									"overviewRulerLane": 7,
									"light": {
										"borderColor": "red"
									},
									"dark": {
										"borderColor": "red"
									}
								}
							},
							{
								"id": "lifecycleOdd",
								"renderOptions": {
									"overviewRulerColor": "rgba(56,154,66,0.1)",
									"overviewRulerLane": 7,
									"dark": {
										"backgroundColor": "rgba(56,154,66,0.1)"
									},
									"light": {
										"backgroundColor": "rgba(156,154,166,0.1)"
									}
								}
							}
						]
					}
				}
			}
		],
		"commands": [
			{
				"command": "extension.dltOpenFile",
				"title": "Open DLT file..."
			},
			{
				"command": "dlt-logs.adjustTime",
				"title": "adjust time..."
			},
			{
				"command": "dlt-logs.sendTime",
				"title": "send selected time",
				"icon": "$(sync)"
			},
			{
				"command": "dlt-logs.sendTimeSyncEvents",
				"title": "send detected time sync events",
				"icon": "$(sync)"
			},
			{
				"command": "dlt-logs.toggleTimeSync",
				"title": "toggle auto time sync",
				"icon": "$(sync-ignored)"
			},
			{
				"command": "dlt-logs.enableFilter",
				"title": "enable",
				"icon": "$(debug-start)"
			},
			{
				"command": "dlt-logs.disableFilter",
				"title": "disable",
				"icon": "$(debug-pause)"
			},
			{
				"command": "dlt-logs.openReport",
				"title": "open report",
				"icon": "$(graph)"
			},
			{
				"command": "dlt-logs.fileTransferSave",
				"title": "save as...",
				"icon": "$(save-as)"
			},
			{
				"command": "dlt-logs.configureColumns",
				"title": "configure columns...",
				"icon": "$(list-unordered)"
			}
		],
		"menus": {
			"editor/context": [
				{
					"group": "1_modification",
					"command": "dlt-logs.adjustTime",
					"when": "editorLangId == dlt-log"
				},
				{
					"group": "0_navigation",
					"command": "dlt-logs.sendTime",
					"when": "editorLangId == dlt-log"
				}
			],
			"view/item/context": [
				{
					"command": "dlt-logs.enableFilter",
					"when": "view == dltLifecycleExplorer && viewItem == filterDisabled",
					"group": "inline",
					"args": "2"
				},
				{
					"command": "dlt-logs.disableFilter",
					"when": "view == dltLifecycleExplorer && viewItem == filterEnabled",
					"group": "inline"
				},
				{
					"command": "dlt-logs.openReport",
					"when": "view == dltLifecycleExplorer && viewItem == filterReport",
					"group": "inline"
				},
				{
					"command": "dlt-logs.fileTransferSave",
					"when": "view == dltLifecycleExplorer && viewItem == fileTransferComplete",
					"group": "inline"
				}
			],
			"editor/title": [
				{
					"command": "dlt-logs.configureColumns",
					"when": "resourceLangId == dlt-log",
					"group": "navigation"
				},
				{
					"command": "dlt-logs.toggleTimeSync",
					"alt": "dlt-logs.sendTimeSyncEvents",
					"when": "editorLangId == dlt-log",
					"group": "navigation"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "mbehr1Logs",
					"title": "Logs (smart-/dlt-logs)",
					"icon": "./media/logs.svg"
				}
			]
		},
		"views": {
			"mbehr1Logs": [
				{
					"id": "dltLifecycleExplorer",
					"name": "DLT Logs Explorer"
				}
			]
		},
		"languages": [
			{
				"id": "dlt-log",
				"extensions": [
					".dlt",
					".DLT"
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^7.0.1",
		"@types/node": "^12.11.7",
		"@types/vscode": "^1.43.0",
		"eslint": "^6.8.0",
		"@typescript-eslint/parser": "^2.18.0",
		"@typescript-eslint/eslint-plugin": "^2.18.0",
		"glob": "^7.1.6",
		"mocha": "^7.0.1",
		"typescript": "^3.7.5",
		"vscode-test": "^1.3.0"
	},
	"dependencies": {
		"binary-parser": "^1.5.0",
		"vscode-extension-telemetry": "^0.1.2"
	}
}